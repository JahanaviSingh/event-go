generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  image     String?
  Admin     Admin?
  Bookings  Booking[]
  Manager   Manager?
  Tickets   Ticket[]
}

model Admin {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [id], references: [id])
}

model Manager {
  id           String      @id
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  AuditoriumId Int?
  Auditorium   Auditorium? @relation(fields: [AuditoriumId], references: [id])
  User         User        @relation(fields: [id], references: [id])
}
<<<<<<< Updated upstream
model Auditorium{
  id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    type      String   @default("UNIVERSITY")
    website   String?
    phone     String?
    openingHours String?
    Screens   Screen[]
    Address   Address?
    Managers  Manager[]
    University University? @relation(fields: [UniversityId], references: [id])
    UniversityId Int?
=======

model Auditorium {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  UniversityId Int?
  openingHours String?
  phone        String?
  type         String      @default("UNIVERSITY")
  website      String?
  Address      Address?
  University   University? @relation(fields: [UniversityId], references: [id])
  Managers     Manager[]
  Screens      Screen[]
>>>>>>> Stashed changes
}

model Address {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  AuditoriumId Int        @unique
  address      String
  lat          Float
  lng          Float
  Auditorium   Auditorium @relation(fields: [AuditoriumId], references: [id])
}

model Screen {
<<<<<<< Updated upstream
    id              Int             @id @default(autoincrement())
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    number          Int
    AuditoriumId    Int
    Auditorium      Auditorium      @relation(fields: [AuditoriumId], references: [id])
    Seats           Seat[]
    Showtimes       Showtime[]
    projectionType  ProjectionType  @default(STANDARD)
    soundSystemType SoundSystemType @default(STANDARD)
    screenType      ScreenType      @default(STRAIGHT)
    price           Float           @default(180)

    @@unique([AuditoriumId, number])
=======
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  number          Int
  AuditoriumId    Int
  projectionType  ProjectionType  @default(STANDARD)
  soundSystemType SoundSystemType @default(STANDARD)
  price           Float           @default(180)
  screenType      ScreenType      @default(STRAIGHT)
  Auditorium      Auditorium      @relation(fields: [AuditoriumId], references: [id])
  Seats           Seat[]
  Showtimes       Showtime[]

  @@unique([AuditoriumId, number])
>>>>>>> Stashed changes
}

model Seat {
  row      Int
  column   Int
  screenId Int
  Bookings Booking[]
  Screen   Screen    @relation(fields: [screenId], references: [id])

  @@id([screenId, row, column])
}

model Show {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  genre       Genre
  duration    Int
  releaseDate DateTime
  posterUrl   String?
  organizer   String
  Showtimes   Showtime[]
}

model Showtime {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  startTime DateTime
  showId    Int
  screenId  Int
  status    ShowtimeStatus?
  Bookings  Booking[]
  Screen    Screen          @relation(fields: [screenId], references: [id])
  Show      Show            @relation(fields: [showId], references: [id])

  @@unique([startTime, screenId])
}

model Booking {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  showtimeId Int
  row        Int
  column     Int
  screenId   Int
  ticketId   Int
  Seat       Seat     @relation(fields: [screenId, row, column], references: [screenId, row, column])
  Showtime   Showtime @relation(fields: [showtimeId], references: [id])
  Ticket     Ticket   @relation(fields: [ticketId], references: [id])
  User       User     @relation(fields: [userId], references: [id])

  @@unique([screenId, row, column, showtimeId], name: "uniqueSeatShowtime")
  @@index([screenId, row, column], map: "seatIndex")
}

model Ticket {
  id       Int       @id @default(autoincrement())
  uid      String
  qrCode   String?
  Bookings Booking[]
  User     User      @relation(fields: [uid], references: [id])
}

model University {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  name       String
  city       String
  state      String
  website    String?
  lat        Float
  lng        Float
  Auditorium Auditorium[]
}

enum ProjectionType {
  STANDARD
  DLP
  LCD
  LCOS
  LASER_PROJECTOR
  LED_PROJECTOR
  SHORT_THROW_PROJECTOR
  PANORAMIC_360_DEGREE_PROJECTION
}

enum SoundSystemType {
  STANDARD
  PA_SYSTEM
  LINE_ARRAY_SYSTEM
  POINT_SOURCE_SYSTEM
  SURROUND_SOUND_SYSTEM
  CEILING_OR_IN_WALL_SPEAKERS
  SUBWOOFER_SYSTEM
  WIRELESS_MICROPHONE_SYSTEM
  DIGITAL_SIGNAL_PROCESSING_SYSTEM
  BI_AMP_SYSTEM
  TRI_AMP_SYSTEM
}

enum ScreenType {
    STRAIGHT
    CURVED
}

enum Genre {
  LECTURE
  CONFERENCE
  STUDENT_PERFORMANCE_AND_PRODUCTION
  CONVOCATION_CEREMONY
  CULTURAL
  ART_EXHIBITION
  FILM_SCREENING
  WORKSHOP
  TRAINING_SESSION
  PANEL_DISCUSSION
  DEBATE
  OPEN_HOUSE_AND_ORIENTATION_EVENT
  NETWORKING_AND_CAREER_FAIR
  RELIGIOUS_AND_SPIRITUAL_GATHERING
  CHARITY_AND_FUNDRAISING_EVENT
  SPORTS_EVENT
  E_SPORTS_EVENT
  ALUMNI_EVENT_AND_REUNION
  HEALTH_AND_WELLNESS_SEMINAR
  POLITICAL_RALLY_AND_CAMPAIGN_EVENT
  TECHNOLOGY_AND_INNOVATION_EXPO
  CULTURAL_FEST
  TECHNICAL_FEST
  FEST
}

enum ShowtimeStatus {
<<<<<<< Updated upstream
    POSTPONED
    CANCELLED
}

model University {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  city      String
  state     String
  website   String?
  lat       Float
  lng       Float
  auditoriums Auditorium[]
}
=======
  POSTPONED
  CANCELLED
}

enum ScreenType {
  STRAIGHT
  CURVED
}
>>>>>>> Stashed changes
